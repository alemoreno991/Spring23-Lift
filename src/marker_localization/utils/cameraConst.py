import math
import numpy as np 
from . import transformationTools as trnt
CAMERA_MODEL = 1
# 0 := INTEL REALSENSE CAMERA
# 1 := HWIL SIMULATED CAMERA

# INTEL REALSENSE
IRSCAM_FOV = 130 # DEGREES
IRSCAM_IMAGE_PHEIGHT = 1920 # PIXELS
IRSCAM_IMAGE_PWIDTH = 1920 # PIXELS

IRSCAM_POSX_B = 0. # FEET
IRSCAM_POSY_B = 0. # FEET
IRSCAM_POSZ_B = -1. # FEET

IRSCAM_RPY_R_CB = 0. # DEGREES 
IRSCAM_RPY_P_CB = 0. # DEGREES 
IRSCAM_RPY_Y_CB = 180. # DEGREES 

# IRSCAM_ROT2CCF = trnt.DCM2d( math.radians( -90 ) )
# IRSCAM_2REF = np.array( [ [ float(IRSCAM_IMAGE_PWIDTH)/2 ], [ float(IRSCAM_IMAGE_PHEIGHT)/2 ] ] )


# HWIL SIMULATED CAMERA (HSCAM)
HSCAM_FOV = 130 # DEGREES
HSCAM_IMAGE_PHEIGHT = 1920 # PIXELS
HSCAM_IMAGE_PWIDTH = 1920 # PIXELS

HSCAM_POSX_B = 0. # FEET
HSCAM_POSY_B = 0. # FEET
HSCAM_POSZ_B = -1. # FEET

HSCAM_RPY_R_CB = 0. # DEGREES 
HSCAM_RPY_P_CB = 0. # DEGREES 
HSCAM_RPY_Y_CB = 180. # DEGREES 

#######################################################################################################################################
CAM_FOV = None # DEGREES
CAM_IMAGE_PHEIGHT = None # PIXELS
CAM_IMAGE_PWIDTH = None # PIXELS

CAM_POSX_B = None # FEET
CAM_POSY_B = None # FEET
CAM_POSZ_B = None # FEET

CAM_RPY_R_CB = None # DEGREES 
CAM_RPY_P_CB = None # DEGREES 
CAM_RPY_Y_CB = None # DEGREES 

if CAMERA_MODEL == 0:
    CAM_FOV = IRSCAM_FOV # DEGREES
    CAM_IMAGE_PHEIGHT = IRSCAM_IMAGE_PHEIGHT # PIXELS
    CAM_IMAGE_PWIDTH = IRSCAM_IMAGE_PHEIGHT # PIXELS

    CAM_POSX_B = IRSCAM_POSX_B # FEET
    CAM_POSY_B = IRSCAM_POSY_B # FEET
    CAM_POSZ_B = IRSCAM_POSZ_B # FEET

    CAM_RPY_R_CB = IRSCAM_RPY_R_CB # DEGREES 
    CAM_RPY_P_CB = IRSCAM_RPY_P_CB # DEGREES 
    CAM_RPY_Y_CB = IRSCAM_RPY_Y_CB # DEGREES 

else:
    CAM_FOV = HSCAM_FOV # DEGREES
    CAM_IMAGE_PHEIGHT = HSCAM_IMAGE_PHEIGHT # PIXELS
    CAM_IMAGE_PWIDTH = HSCAM_IMAGE_PHEIGHT # PIXELS


    CAM_POSX_B = HSCAM_POSX_B # FEET
    CAM_POSY_B = HSCAM_POSY_B # FEET
    CAM_POSZ_B = HSCAM_POSZ_B # FEET

    CAM_RPY_R_CB = HSCAM_RPY_R_CB # DEGREES 
    CAM_RPY_P_CB = HSCAM_RPY_P_CB # DEGREES 
    CAM_RPY_Y_CB = HSCAM_RPY_Y_CB # DEGREES 



CAM_POS_B  = np.array( [ [CAM_POSX_B], [CAM_POSY_B], [CAM_POSZ_B] ] ) # FEET
CAM_RCB = trnt.rpyDCM( math.radians(CAM_RPY_R_CB) , math.radians(CAM_RPY_P_CB) , math.radians(CAM_RPY_Y_CB) )
CAM_RBC = np.transpose( CAM_RCB )

CAM_ASPECT_RATIO = CAM_IMAGE_PWIDTH/CAM_IMAGE_PHEIGHT
CAM_Z_C_SCALED = -(CAM_IMAGE_PHEIGHT/2)/math.tan( math.radians(CAM_FOV) / 2 ) 
